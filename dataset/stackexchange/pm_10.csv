question,answer
Why use story points instead of hours for estimating?,"Using points is one version of what is often called ""Relative sizing."" For a very highly recommended initial perspective, check out this video and then come back. Most uses of story point estimation limit you to the lower end of the Fibonacci series: 1, 2, 3, 5, 8, 13 because the goal is to group things of similar overall size rather than to pursue a highly precise estimate. Story points often take into account three different aspects when estimating: Complexity, Effort, and Doubt. This allows them to more effectively capture the sources of variation that will make an hour-based estimate wrong. Complexity is the ""stuff we have to figure out."" We know we can solve the problem, and we probably have a decent feel for how we'll approach it, but we still have to figure it out. Effort is the sheer amount of stuff that needs done. For me, that example is configuring SharePoint lists, because I knew exactly how to solve everything, and I knew how many there were, but it still took time to run through them. Doubt is about the stuff we don't actually know if it can be done. We may suspect we're on the wrong track, that the technology isn't up to it, or some other factor that would cause us to churn for a while before we figure out if we can actually do the work. Most stories contain a combination of all three, and thus it's useful to have a common language so that when I say ""it's an eight"", I can follow with ""because of the complexity of the foobar algorithm"" or ""because I'm not sure if our cache is set up to handle that yet."" The final point estimate is just a way to say ""taking all of these things into account, I think this is bigger than most of the things we've called a three and smaller than most of the things that we've called an eight, so it must be a five"""
How to Avoid Micro-Managing a Software Development Team? [closed],"- What situations have you been in when
  you've fallen into the trap of
  becoming a micro-manager? I agree with Ashes that this happens usually when there is lack of trust between managers and the team.
Also, this can be a problem of the company's organizational culture, such as with a vertical, hierarchical organization. - How can one tell if he/she is
  micro-managing a project other than
  someone coming out and saying it? If you, in a manager role, survey your development team to know what is the motivation or realize they are leaving the company for the same reason i.e. ""No hope of moving up"", then it may be because the managers own every part of the project and don't let people make their own decisions. The problem is, when resolving conflicts, the manager usually is the one who has less information. If you are making too many decisions to push the team forward then it can be a micro-management warning. - What are some strategies that you've
  used to avoid becoming a
  micro-manager? I like Joel's advice on Command and Conquer and the Herd of Coconuts: everybody owns some area. When they
  own it, they own it. If a manager, or
  anybody else, wants to provide input
  into how that area is managed, they
  have to convince the owner. The owner
  has final say.  every decision is made
  by the person with the most
  information. management is extremely
  flat. Ideally, managers just don't
  have time to get their fingers in the
  pies of their reports. You may be
  interested to read about a GE plant in
  North Carolina that has 170 employees
  who all report directly to the plant
  manager. Avoid the ""Command and Conquer"" management or the ""Hit and Run"" management, unless you have a ""Herd of Coconuts"" on your development team. In other words, a manager must leave the developers alone."
How to estimate amount of work/man hours for an unfamiliar task?,"Don't place too much confidence on your first guess just because you've used a sophisticated formula to derive your estimate.   Do your best, move on, plan to revise your estimate, don't let bad estimates linger and destroy the discipline of your project schedule ... errors in time estimates are likely to be lognormally distributed... use a method that incorporates an optimistic guess, a pessimistic guess and heavily weights your best guess.   Estimate, test, check, then revise and update your project schedule.  The third or fourth revision of the estimates is usually about as accurate as you can hope for; your second estimate is far better than your first guess ... if possible, try to get a measure from an early trial of a similar or analogous task ... revise the estimate and revise your plan as soon as better data becomes available.   If your first estimate was too conservative, don't allow slack time to corrupt completion of succeeding tasks.  If your first estimate was overly optimistic, make your adjustments EARLY and let your stakeholders and customers know. It's more important to be good at following up, to check your estimates and to competently communicate updates than it is to be a develop skill as an estimator of unfamiliar tasks."
Why would teams use the Fibonacci sequence for story points?,"Some teams also use powers of two, or have a scale like 1, 2, 5, 8, 20. The idea is that the larger the story is, the more uncertainty there is around it and the less accurate the estimate will be. Using the Fibonacci sequence helps teams to recognise this uncertainty, deliberately creating a lack of precision instead of wasting time trying to produce estimates that might also carry a false degree of confidence. Dan North's blog post, ""The Perils of Estimation"", explains this very effectively IMO."
What is the weighting difference between Epic/Story/Task,"In Scrum here is the rough breakdown: Epic - something so big it probably won't fit into a sprint, is not clearly understood in terms of customer requirements and should be broken down into stories. T-shirt sizing is a common way to size epics. Another way is to say we think it could take X to Y iterations to do this work. Epics are usually defined during initial product roadmapping and decomposed into stories in the product backlog as more is learned. Story - something actionable and small enough to fit in a sprint. These are story pointed and defined using INVEST criteria. Stories should deliver a vertical slice of functionality to the customer that is valuable and complete by the end of an iteration. Stories are usually created throughout product development, more so leading up to iteration planning and also during higher level product roadmapping. Tasks - decomposed parts of a story that get into HOW the story will be completed. Tasks can be hour estimated if desired. Tasks are usually defined by the people doing the work (developers, QA, etc), whereas stories and epics are generally created by the customer or the product owner representing the customer. Tasks are created within the bounds of an iteration because they are short-lived. There is very little value is tasking out stories that won't be worked on in the upcoming iteration."
Why can't the ScrumMaster and the project manager be the same person?,"Scrum makes the distinction between supporting the team in WHAT work they do and HOW they do it. Trying to have one person play both of these would create a great deal of conflict. How do you choose in a stressful situation between negotiating features or helping the team grow and reach consensus. A scrum master is a facilitator, how can he/she facilitate if she owns the project too?   ""The Product Owner and Scrum Master roles complement each other; The Product Owner is primarily responsible for the “what” – creating the right product. The Scrum Master is primarily responsible for the “how” – using Scrum the right way. Only when the right product is created with the right process is enduring success achieved.""
–Roman Pichler, “Agile Product Management with Scrum” Here is my visual view between the tradition vs. scrum roles... 
http://skipstoneconsulting.blogspot.com/2011/12/identifying-with-titles-or-what-happens.html In summary, to specifically answer ""Why can't the scrum master and the project manager be the same person""? is because you can not (should not) ask one person to be responsible for HOW the team does their work and WHAT work the team does because under business pressure, the person will cave or favor one side of the spectrum. Mostly likely the ""What"" part. With some there watching over the ""high"" you ensure that quality and good team practices and more are also getting the focus that is needed to keep a healthy performing team, while the other is focused on making sure that healthy performing team is getting good focused input and vision from one source. "
"When to Use Waterfall, When to Use Scrum ?","First of all, it isn't an either-or type of problem. You will find pure implementations of both approaches (pure waterfall being rather rare these days) as well as a mixture of both approaches or some of this, some of that and much of chaos. Then it would be better to discuss heavy-weight formal approaches versus light-weight agile approaches, than waterfall versus Scrum as they are just specific cases. You may want to use formal approaches when: You work for a big client who enforces a very formal approach on vendors. You work on fixed-scope, fixed-price contracts and client doesn't expect (for any reasons) rapid change in the scope. You project team is experienced with specific heavy-weight approach - they know how to deal with it, they know how to use it to deliver a high-quality project. You should consider agile approach when: You work on in-house projects or projects for more flexible clients where you don't have to adjust to client's processes. You work on a project where the scope is changing rapidly (for whatever reason) and you tend to accept the fact. Your team isn't fluent in any specific project management approach as generally agile methods make learning curves pretty smooth in terms of introducing best practices. Having said that, feel free to mix different approaches - whatever works for the team and for the project can be and should be used. You don't get points for being orthodox with any specific approach - you get points for delivering projects. As a piece of final advice, it's better to use potentially worse methods (where worse means one which doesn't suit so well to your specific project environment) but use it well, than use potentially best methods but screw up its implementation. See: Good waterfall is better than bad agile"
How technical should a Project Manager be?,"Technical skills is always nice-to-have trait for project manager but in vast majority of cases they aren't crucial. If project manager has the best technical skills in the team why is she managing the project and not building the project? If PM has to double-check every estimate he gets from the team there's some basic problem with trust in that team. PM is one of team leaders (note: usually not a manager who has direct power) who can influence team members. But it doesn't mean PM should be the most knowledgeable and most experienced person in the team. It's like with leading any other entity - when your knowledge is short find people who are knowledgeable enough and you trust them, no matter if you deal with an estimate or a technical issue or whatever.  And when we are on estimates, gather historical data: both estimates and time you really used. You'd be able to tell how optimistic your team or a specific member typically is."
Is Scrum a status report meeting or a developer meeting?,"No, what is happening in your meetings is not a Scrum stand-up meeting, it's a status pull. In fact, it's probably worth dissecting this particular status pull to see why your ""Scrum"" process is failing. The first two elements that your project manager (not Scrum Master, evidently) is asking are: The only practical utility for this information is to determine whether estimates were on-target or not, or whether there are hidden process impediments that were not planned for in the original estimate. However, gathering this information in this particular way is not very agile because: Now, the last item is particularly telling. Your PM wants: Getting better at estimating is a useful goal for any agile framework. However, one goal of Scrum is to ensure that the team does not over-commit; if there is extra capacity within the Sprint once all stories are completed, then the team can and should pull additional stories into the Sprint from the Product Backlog. The question, as described, sounds a lot like stories are being assigned to the team for each Sprint, which is an epic fail from a Scrum stand-point. Even if that's not actually the case, it's another ""project smell"" that indicates that individuals are being ""held accountable"" (presumably by the PM) for the accuracy of individual story estimates, rather than for the team's overall progress in meeting the Sprint Goal for that iteration. Mis-estimating is an issue that should always be communicated clearly during Sprint Reviews, and used as a learning process during the Sprint Retrospective. However, the tone of the question above implies that accountability for estimates is more important than anything else, and diverts focus from feature delivery to C.Y.A. delivery. The following is incorrect: [The stand-up] is a meeting to go over developer needs & issues in a manner that is relaxed and for the developers (no one else). The daily stand-up is a commitment and coordination meeting for the entire team. It is designed to ensure that the entire team is aware of impediments, what stories are done or not-done, and what tasks are ready to be pulled from one team member's to-do list into someone else's. None of the above means that a Scrum Master or Product Owner doesn't gain value from the meeting. A well-run daily stand-up will give the Scrum Master a clear picture of any process issues and whether individual stories are done or not-done. The Product Owner gains a sense of whether there are risks to the current Sprint Goal, timely insight into backlog grooming tasks for the next iteration, and provides advance notice of when a Sprint might need to be terminated early. It is important that the Scrum Master and the Product Owner be active participants in the stand-up, but if the team is reporting to either of them, then the team is neither self-organized nor empowered to efficiently deliver value. Here is a short list of ""project smells"" that seem related to your issue. It's part of a longer list I came up with for reference when I'm doing Scrum training for teams or when I'm coaching other practitioners. If any of them seem applicable to your situation, then your team may want to take the issues on-board during a retrospective."
Minimum Project Management Practices for One-Man Software Projects,"For software projects, even when you're the only developer and end user, I find it extremely important to have some kind of issue tracking. It might as simple as a spreadsheet, or something more sophisticated as dedicated software hooked into your version control repository. You will forget things. The list is there to save you the time."
How to deal with unavoidable on-demand tasks in Scrum? Or should we even try?,"Retrospect, retrospect, and retrospect some more.  While the problem you describe exists to varying degrees on most scrum teams, don't settle with a band-aid solution.  First understand, quantify, and make transparent the impact to your scrum team.  Sometimes its better to do this without applying a pain killer... Creating slack, whether via velocity or capacity based planning is not a true solution, just a reaction/painkiller to lessen a problem that may initially seem too external to address. As a scrum master you should feel empowered to tackle deep and/or long-term organizational problems outside of the immediate team(s) you serve.  Why do so many ad-hoc requests come in?  Is there a pattern, organizational structure(s), or certain people that agitate the issue?  Use the retrospectives with your team combined with your time spent navigating and understanding the organization to get at the real root causes of why the problem arises. Ashok provides one solution for the deeper problem - which sounds like a lack of higher level planning and coordination between teams.  How you solve that problem will depend on your organizational structure and the root causes you identify."
What are the biggest mistakes that new project managers make? [closed],"In my opinion a big problem is that you try to solve the problems yourself and not manage the project. Your job as a project manager is to lead the people who do the actual work (of course this depends on the size of the project, in small projects you will have a technical role too). Another one is that you underestimate soft factors (and therefore soft skills). You can have as many technical tools as you like - in the end project management is people business!"
"Is it sound project management practice to make software engineers fix bugs ""off the clock""?","And not only are they suppose to correct them, they are suppose to
  correct them on their own time without impacting plans. This is your problem. Why don't your plans include the time for fixing bugs that you know will be there? We all know it's impossible to write perfect code. We all know that bugs inevitably creep in. Expecting engineers to fix their own bugs on their own time without planning for that work is not ""hardcore"": it's bad project management. It means the work required to fix the bugs is hidden work, invisible to upper management & other stakeholders.  There are a variety of ways to plan for that work, & there are a number of other questions here that discuss that. But you have to get it in the plan, and stop expecting your engineers to be perfect. Which is not to say that you shouldn't also continue to work on bug prevention, of course. But your approach as a PM and as a team needs to accommodate the fact that bugs exist. If I were going to put forward an argument against this practice, I think I'd do it with a risk management approach. Identify bugs as a known risk, and list a variety of mitigations, including all your bug reduction practices as well as planning for bugs that escape nevertheless. Maybe add poor morale and/or exhausted engineers as another known risk, and suggest as a mitigation ending or limiting the practice of having employees fix bugs on their own time. Point to some studies on the effects of overtime on employee performance. If you need to have something else to put in that accountability slot -- which presently seems to be more punitive and individually-oriented than is generally encouraged in agile development, which emphasizes the team and the team's investment in a quality product -- hm, I don't know. Maybe focus on accountability for violating the bug-reduction practices, instead of on bug escapes which are a fact of life."
Why aren't you supposed to report status in standups?,"It's not that you aren't supposed to report status in the Daily Scrum. Instead, the purpose of the Daily Scrum is to enable the Developers on a Scrum Team to understand the current state of progress toward the Sprint Goal and adjust their plan to maximize the chance of the team achieving the Sprint Goal before the end of the Sprint. What the Daily Scrum looks like depends on the team. A team where the Developers tend to work individually and sometimes in pairs would likely have a different structure for a Daily Scrum than a team that regularly mobs. If people are working individually, there may be more emphasis on the current state of work and what people need from each other to get to Done. If the team tends to work as a single entity, there may be more emphasis on planning. Regardless, though, the objective is to assess progress and adapt the plan. The emphasis on knowing how fast the work will be done seems suspect. When I'm asked to facilitate Daily Scrums, I tend to focus on the age of the item with respect to the team's history. Depending on the tool you are using, you may be able to get information about work item aging and cycle time. Focusing on reviewing items may be a reasonable thing to ask - if you use a Kanban board to visualize the workflow, there's a common practice of walking the board right-to-left and making sure the right-most items progress before taking on new work. As an aside, canceling the retrospective raises more questions about the ability of the Scrum Master. Retrospectives are not only an important part of Scrum but are the only practice mentioned in the Manifesto for Agile Software Development. If work isn't getting done within the Sprint timebox, the retrospective is the perfect opportunity to understand why and make adjustments for the future. Together, with the changes to the Daily Scrum, I'd question if the Scrum Master truly understands the Scrum framework and the Agile methods."
Why are developers expected to estimate tasks at all?,"Why are developers expected to estimate tasks at all...[when i]n my ideal world, management would simply tell me which task they want me to work on next and then as it proceeds ask for a regular update of what percentage of completion it is at. It would then be the manager's responsibility to extrapolate my likely completion date, learn my accuracy over time, adjust to it and manage expectations of upper management. Most of your question is really a rant about how things work at your workplace. Discussions about toxic workplace practices per se are out of scope for PMSE. In addition, your ideal of just plodding along and expecting the rest of the organization to adapt itself to you is unrealistic, and completely unmoored from the purpose of business, which is to make money by providing a product or service within a given schedule, scope, and cost. The company's customers also have goals, deadlines, and budgets that need to be met, so you're basically positing a world where nothing can be predicted and your personal cadence sets the pace for the entire market. That's unreasonable on its face. That said, estimating poorly or failing to use modern techniques such as batch and queue theory to manage estimates certainly leads to poor results. That's what agile frameworks address: the inaccuracy of estimates that aren't based on small, estimable, and sustainable batches that can be successfully delivered at a predictable cadence. There are even people who advocate for flow and cadence as the estimation tool (using the poorly-named #noestimates hashtag on Twitter), but there must still be bounding boxes around any project that has constraints. Your X/Y problem is that you have a problem with your company setting deadlines that you can't meet, then asking you to estimate tasks in a way that leads to inaccurate estimates and blame when deadlines are missed. That is ""X"". You have decided that not having deadlines or estimates is the solution to your problem, and posit this solution ""Y"" as the answer to the perceived process problem solely as it affects you. Unless you shift the frame to include the rest of your team, other parts of the organization, and a business perspective then you are simply venting rather than becoming part of a constructive solution. Implicit in your X/Y problem is a lack of effective communication with your middle management and senior leadership; possibly even within your team. You need to address the communications gap before you can do anything else. Aside from your frustration, your team and organization need to address the root cause of unmet expectations. Selling projects without sufficient controls on scope, schedule, and budget is a non-starter, so your team and the company should both understand what the constraints are. It is unlikely that it is your job to define any of these constraints, but it is certainly your responsibility to talk with your team and with line management if you are continuously working on ""death march"" projects. It is likely that one or more of the following need to happen: The first few points are things that can be fixed in any organization once a root cause is identified and acknowledged. The last few points are really just workplace advice, which seems necessary because your current framing of the issue doesn't take anyone into account but you. If you are unhappy or a bad fit, your only realistic options are collaborate with your leadership on solving whatever underlying process problems exist or moving on to another role that makes you happier. Project management is the practice and profession of delivering a finite product or service within the constraints of scope, schedule, budget, and quality. All projects have constraints, and all successfully-managed projects have controls to manage those constraints within acceptable tolerances. While how the constraints are controlled may vary, the need for controlling project constraints will not go away. Trying to wish project management into the cornfield is not a useful endeavor. Instead, see if you can be part of the solution. If not, brush off your resume and move on."
Employee gave themselves very negative self-evaluation - how to handle the situation?,"He is communicating a message to you that has nothing to do with the self appraisal or what he thinks of himself.  You asked him to fill out a form, and he returned it to you with three small, inconsequential items and blanks everywhere else.  Mark hit it: he's not happy about something and he is letting you know.  It could be as simple as he is not happy in his current role or something more cancerous like your appraisal of him is immaterial and he is barely paying attention. So, I'd advise not to approach it like, 'you don't think you accomplished anything last year?'  Instead, open up a dialogue and find out what is on his mind, bigger picture.  This would be about you asking questions and letting him answer, with most of the talking coming from him.  How are your listening skills?"
Where to Find a Desktop Kanban board application? [closed],"Check out Microsoft OneNote.  A page of a section of a notebook can be treated as kanban board.
E.g. you may create dedicated page for each project iteration/phase.
For each project you may create dedicated section.  It has several ways for sharing: There are several nice features also: Sample image of the one of my project. Although it is not Kanban board, it is enough to demonstrate the idea.
"
"Kanban, moving items back? Or how do you manage mistakes?","Since one of Kanban rules is to make policies explicit you should define what exactly ""QA"" stage in your process means and what kind of activities it covers. One of common approaches is that such stage covers both testing and fixing bugs, which means that it is perfectly normal to work on the code, namely fix bugs, when a feature is in QA stage. Of course you can choose an isolated approach as well, where unless feature is fully tested and decision is made whether it is good or not nothing in code changes. Note however that such approach basically hampers the flow as you create formal, and possibly multiple, hand-offs during testing/bug fixing stage. Thus, my first advice would be to treat your QA stage as the one covering both testing and bug fixing which basically renders the problem of moving index cards anywhere irrelevant. Additionally, since basically you should first deal with the features which are closer to completion a team member should first deal with any bugs they do have in features being tested and only then move to new features. Note: that I don't necessarily consider that a feature, which we found bug in, should automatically be blocked. If this is rather common situation I wouldn't do that. If you overuse blockers they don't have that much of value anymore. Besides, the question is: do you really need to treat it as emergency and swarm over a feature when just a couple of bugs are fund there? Other ideas to deal with the problem: You may think of moving cards back but personally I don't recommend it. It just adds a lot of hassle. You can have policies that you can violate limits in such situation (as Siddhi suggests) but still I'd say the chaos it introduces isn't worth the value you may gain. You may ""park"" features which didn't pass testing. You may have dedicated subcolumn where you put such features so everyone knows that they require bug-fixing. Additionally you may decide whether these features count to your limits or not. I wrote more on such approach here. You may just visualize status of testing, e.g. testing started, testing passed, testing failed, with additional visual signal and keep the index cards in QA column. You get the same information you'd get with moving cards back but it doesn't introduce chaos to the board. I mentioned and described such approach here. You may deal with bugs using additional information radiator, usually not a full-blown Kanban board. Then, again, you keep the index cards in QA stage but you deal with bugs independently. Joakim Sunden shares a neat method to deal with such tasks. Either way my advice would be to start with a simplest possible method which seems to work. You probably neither want nor need a complex tool to cope with the problem, thus the first idea to just define the process in a way that makes the issue non-existent. By the way: QA comes from Quality Assurance which is way more than testing or QC (Quality Control) which is what you seem to do in your QA stage. Read more here."
How do I measure employee (software developer) performance based on bugs created?,"Please be careful when using these kind of measurements as KPIs. If you do this, I predict the following: This article by Esther Derby suggests alternatives to using KPIs in pay reviews. There's a growing body of evidence that suggests that using performance as a way of measuring pay is destructive. My experience is certainly that it encourages heroism and a blame culture rather than team work, particularly when the KPIs are measuring unwanted items."
What is kanban?,"Kanban is a method for developing products with an emphasis on just-in-time delivery while not overloading the developers. It emphasizes that developers pull work from a queue, and the process, from definition of a task to its delivery to the customer, is displayed for participants to see. 5 core properties: Personally, I think this mini-book is one of the best and fastest introductions to Scrum and Kanban. Here is an example of a whiteboard to be used in Kanban
"
How to deal with a team member who keeps missing deadlines?,"I'd approach the issue from two sides: Measuring progress. If you set a big task which is either done or not the only thing you can get is information whether it is done or not. Zero or one. However if you, or discussed person, split the task to a set of smaller pieces of work you can more easily tell where you are - we have 3 out of 12 done which means that you're ahead/behind/on target according to the schedule. You can do this as well as asking for updates of percent complete but then you are more likely to hear that you're going with the plan from 0 to 90% and then everything is stuck. Also to avoid waiting to the last moment for the information you're not getting what you expected set a more frequent update schedule. You want to hear current status every n hours/days/whatever. You may need to remind the person to deliver their status update, but hopefully they can learn to do this. If not you have a problem somewhere else as well (with the basic work organization of the discussed team member). Clearly setting expectations. This is something we often forget about. We don't tell what exactly we do expect from team members. In other words if we don't tell we need to hear about the slip at the very minute you're falling behind the schedule, we shouldn't expect everyone would willingly come to tell us about that. If we don't tell we need regular status updates in specific time slots, we hardly get any. If we don't clearly explain that being CCed on email doesn't mean we are able to decide whether we are on time or not, people may assume that. Whatever method we choose in point 1. we should clearly explain what we expect or request from the team member (or team members). Without that we can address the issue to our communication problems and not discussed person's bad self-organization and poor communication."
What are the signs of an incompetent project manager? [closed],"An incompetent PM fails to go to bat for his or her team when the devs are right and the customer is wrong. This doesn't mean that we don't bend over backward to satisfy the customer's needs, but that the PM does have a spine and is looking out for the team's interests.  One example of this would be the customer demanding an unreasonable schedule that the team either can't make or can only make through unreasonable amounts of overtime.  It's the PMs job to shield the team. Along with this, a PM who doesn't understand the political landscape or is ineffective in maneuvering through it will struggle.  Politics, office and otherwise, are a fact of life and a PM must be adept at building and using political capital for the good of the company and the team. A PM who says the wrong things to the wrong people at the wrong time and wastes the teams capital is incompetent. An incompetent PM doesn't know or care about the technology or details of the project. Unless the PM is also a developer, it isn't expected that the PM have the technical background to implement the project, but he/she should have enough to understand the team's problems (and solutions) and be able to accurately represent them to others in non-technical terms."
Should bugs be treated as stories or as tasks?,"I use a modified version of Scrum with my teams in week long sprints.  The product backlog is ordered from top to bottom in order of importance.  The development team takes items off the top of the stack and works on them. If the feature isn't done at the end of the week, we talk about what will be done at the end of the next sprint, and work continues on the incomplete items. In Managing Bugs in Scrum, the author, Mark Summer, suggests treating bugs as the same as a partially implemented feature.  If you really think about it, that's exactly what a bug is.  It's a specific part of a feature that is not completely implemented. I currently have a bug list and a feature list.  I am considering merging them and treating the bugs as incomplete features, as suggested by the blog author.  This will greatly simplify the challenges I face in prioritizing tasks, and it will make it easier for developers to pull tasks off the product backlog stack."
Daily standup vs. Micro-management,"If you ask this question, or even if you have troubles answering it, you are likely a victim of dark scrum. A daily scrum meeting, done right, has no micro-management. Terms have power, and dark scrum is one of these potentially important terms that I would like to see spread. Scrum was never made for this kind of micro-management, and its mis-use can have dire consequences for developers, projects and scrum itself (as a concept). If you can, consider using the term ""dark scrum"". from the linked page(ronjeffries.com), EDIT: I emphasize that below is a description of ""dark scrum"": Every day, the team is supposed to get together and organize the day’s work. This practice, the “Daily Scrum”, is imposed on the typical team. There might be one person in the room, the ScrumMaster, who has been told how it should be done. The programmers haven’t been told. Quite often, even the Product Owner hasn’t been told. Almost certainly other power holders haven’t been told. But the power holder already knows his job. His job is to stay on top of what everyone is doing, make sure they’re doing the right things, and redirect them if they’re not. How convenient that there’s a mandatory meeting where he can do that, every single day! The result: instead of the team rallying around their joint mission and sorting out a good approach for the day, someone else drags information of of them, processes it in their head, and then tells everyone what to do. Since nothing ever goes quite as we expected yesterday morning, this improper activity often comes with a lot of blame-casting and tension. Dark Scrum oppresses the team every day. Self-organization cannot emerge."
Why do all the teams that I have worked with always finish a sprint without completion of all the stories?,"I cannot speak to your particular situation but yes, it is pretty common that not everything is done. This is in fact a logical consequence of the structure of the team, and you being a developer are in a prime position to appreciate it.  If I were to ask you “do you run a server at 100% load?” you would likely laugh in my face. So I might follow up with “OK if that is ridiculous, what sort of load is acceptable?” and you might offer a number of responses including simply “how do you define load?”  But I think we could settle on the idea that more or less no matter what the definitions are, you would not like server loads above, say, 10-25% of capacity: certainly not much above 50%. And were I to ask you “why not?” you would very likely first give the Wrong Answer: that you’re worried about hardware failure. That’s a fair point but usually if you’re doing it right you’re already guarding against that risk. And then second you would give the Right Answer: that you’re worried about latency spikes. If the server doesn’t have spare capacity, it can’t begin a new request until it is done finishing up old ones. And that’s true of people, too. The core problem is that a sprint model typically assumes one way or another that there is 100% developer load, and developers respond by padding out their estimates with safety buffer so that they can hopefully only operate under 50% load or so. Then you have natural problems dealing with the same two problems: hardware failure (employee burnout) and latency spikes (hey, Legal said one week ago that Floozels must only be awarded for the Flotsam that is also Jetsam—why isn’t this fixed now?!). In practice nobody wants to accept the latency spikes and so they simply throw story points of developer time out of the current sprint in order to keep latency low with their bosses and the business at large. Similarly any “some other issues came up” workloads appearing in stand-up have the same origin. So your developers are taking care of their own health and that means some amount of doing non-work, and this sometimes bleeds into losing story points; and your developers are doing one-off requests or unexpected workloads, and that sometimes bleeds into losing story points. Those are the two main sources.  In fact the problem is somewhat larger than this because safety factor in estimates is much much bigger than even the typical advice to “always multiply estimates by N” suggests. The reason is that the private estimate for completion completes the goal with, say, a 90-95% probability, which for realistic situations might already add a factor of 2 of safety versus the 50/50 chance of completion that we should idealistically be able to target; furthermore a PM then buffers those estimates with some additional padding anywhere from 20-100% when communicating with the business as a whole. Take any software project, and something like three-quarters or more is safety buffer. We devs would be completely scandalized at the idea that any project would ever run over-time or over-budget if we understood how much safety buffer we have to spare to complete it. The typical excuses we give, “oh we will be late because in our last week a hurricane took out our data center causing all of our systems to be down for several days, but the team worked together and pushed really hard and we got everything working and we’re only going to be late by three days” are laughable simply because given the safety buffer we should have delivered way before that hurricane hit. So there is a paradox of we have huge safety buffers and we still deliver late. The solution to the paradox must be waste; we must be wasting all of that precious safety buffer. This happens in many different forms and enumerating all of them would make this answer very long. However I think we need to point the finger first squarely at management simply because the developers lied in the first place; they padded their estimates first from 50% to 95% and then they added another factor-of-two on top of that, and this means that management has not created a space where they feel safe in being totally honest with their estimates. Why do I feel free to take care of myself by answering a question on Project Management SE? Because I am at the start of a sprint and everything has luxurious unspent safety buffer still and so nothing seems desperately urgent. Come back to me on the last three days of the sprint and see if I am still on PMSE, heh. I can also give a quick sort of aspirational vision for how to solve it. In theory there is a dependency graph of tasks-to-be-done for your Sprint Goal or any other release you have, and it typically involves some real stinkers that nobody wants to take on, like “figure out why the QA server is crashing even though we have implemented workarounds to make it not crash so that QA is unblocked, we have no idea what’s causing it, good luck, don’t break anything.”  If you think about commits on this sprint to your develop or master branch, you see that even though the dependencies are in many cases not enough to structure the thing completely, the tasks will ultimately form a directed acyclic graph and there is some critical path from sprint-start to sprint completion: the path through this graph of work-as-done which takes the longest amount of time. Then there are several side-paths—other devs working on important things which are not on this critical path—which have to merge into that critical path.  I don't care about them unless they delay the critical path, really: people can be free to goof off within some reason on their side-paths. In the ideal project there is therefore at any given time exactly one developer who is in a state of panic. They are working on the critical path, and they know that this responsibility is upon them. The critical path is something of a baton or hot potato that they are looking to pass off to the next person as soon as they can; and they are given considerable power to loop in other developers to help them with their task, or to compromise scope of their feature to be good enough to pass the baton on. PMs and other facilitators have several roles: They coordinate dynamical changes to the critical path. Suppose the schedule looks like this: in this diagram, Alice and Bob are on a side-path; they both have a 50/50 shot of completing in 2 units of time, Bob’s work can’t start until Alice’s is merged. They share a safety buffer of 3 units of time for their thing before it merges into the critical path; it is needed when Carol hands off her changes to Dan; she has a 50/50 shot of completing in 7 units of time. Now when this schedule meets reality, you have to accept lots of “it’ll be done when it’s done” and trust these four to be doing their best; Carol is aware that the entire project right now is riding on her work and is in the state of panic. But what can happen is that Alice was pulled into something else and it is t=3 and she has at least one time unit before she can finish and hand it on to Bob at t=4; but Carol is estimating that her task was much easier than expected and is going to be handed on to Dan at t=5 or t=6. So in theory facilitators should be noticing when the safety buffers on these side projects are running out or when the tasks on the critical path are getting done early (either alone is enough to potentially lead to a shifting of the critical path) and letting folks like Carol know that they’re no longer custodians of the hot-potato: that it has shifted and they can relax a little because now the person who is most affecting our precious safety buffer and hence our ability to meet the deadline is Bob, who now needs to feel that responsibility. If facilitators can do all of that with compassion then they can build a trust and hypothetically deliver projects significantly faster, because the key feature here is that we are treating the safety buffer as a precious resource. Teammates are under pressure proportionate to their ability to affect that buffer: the ones who most affect it are therefore not wasting it with “oh let me go check Reddit...”. The others are allowed to rest so that you get the benefits of a well-rested team. And finally, we do not waste anything we get when someone delivers early because we communicate. Note that this is a very pretty vision but I have to attach some caveats. This is not a universal structure of all business. It is a derivation of some general principles for a specific context where every object being produced is a fundamentally new artistic endeavor and only is produced by some big complicated cooperative effort. Your software teams may be working in a different business sector which does not work this way: for example Valve no longer makes big software games to be bought for a big price tag but instead makes skins and user customizations sold on Steam to get a lot of micro-sales; one can imagine that the Valve Before would have strongly benefited from this sort of structure whereas the Valve After probably would not see those sorts of returns. But those sorts of patterns are pretty common in software development so it is reasonable to think that many software shops would benefit from something looking similar to this."
"Is it bad manners or practice to request ""Read Receipt"" to all mails sent from my account?",Always seems unprofessional to me and can lead to bad project management. Just because someone received the email 
What is the Project Management book that left the most impact on you?,"The Mythical Man-Month by Fred Brooks Coming from a software development background, this was the first book I read that was written from a project management perspective.  A lot of the lessons discussed are deeply ingrained in the software industry and are considered common knowledge, if not common sense.  Some of the mistakes pointed out by Brooks are still being made today, so it appears (unfortunately) that the lessons are timeless. Brooks' classic essay No Silver Bullet is included in the MMM 20th anniversary edition that I have, but you can also read it at the link provided."
What to do with developers who don't follow requirements?,"Tom is an unguided projectile. Regardless of why he does what he does (whether he believes himself to be better or simply lacks proper guidance), the core issue here is that he not only second-guesses any information/objectives that you give him, but he will independently decide to follow his own instinct. if the wireframe puts a blue color button, he will produce a green color button and spend time justifying why his color is better The reality is slight different based on whether Tom's argument is right, wrong, or inconclusive.
I've worked with developers in either case. Sometimes, the story itself has flaws (e.g. bad or confused analyst) and the developer is actually right. If you treat a developer who is correct the same way as you would a developer who is wrong (i.e. by sticking to the story as written), you're going to lose the respect, trust and goodwill from the (correct) developer. Assuming Tom is objectively wrong, his deviations should be squashed immediately. If your developer refuses to accept anything other than their own idea, you have a conflict of character and this may become unresolvable based on how stubborn Tom is.
However, take note to not do this unless you definitively know Tom is wrong. If he ends up being right, it's going to reflect badly on you/the team/the company and over time this can lead to notable hits to morale. Assuming Tom is objectively right, and you don't want to suppress his positive feedback for future issues, the focus should be on telling Tom that he needs to coordinate any deviations from the planned tasks. There may be cases where Tom is right and there is no impact on the development effort and the PO agrees, in which case Tom actually gets what he wants. No system is above fault correction, but it needs to happen in agreement with the product owner (or whoever the story originated from). However, that doesn't mean that ""Tom gets to do what he wants as long as he is right"" is the end of the discussion. If Tom goes rogue and deviates on his own, he bears the responsibility on not delivering what was asked. As far as your story is concerned, it's irrelevant whether Tom was delayed working on a green button (= something that wasn't asked) or because he wasn't working (in either case, it's Tom spinning his wheels during his working hours). What matters is that Tom didn't deliver and Tom did not make anyone aware of the expected delay. Unless you/the PO agreed to having a green button instead of a blue one, Tom delivering a green button means he did not deliver the task, regardless of whether green is better than blue or not. A developer who doesn't deliver a task isn't inherently an issue, as there may have been unforeseen complications or simple developer inexperience. But a developer who repeatedly fails to deliver or coordinate with their own team is not performing their duties as a team member. At the end of the day, Tom does not get to singlehandedly decide the color of the button. His job is to do what was asked. If he has relevant feedback, he's allowed to bring that to the table (up to a point), but he cannot make decisions, most definitely not on his own.   The problem seems to have gone on for long enough that I would personally suggest ignoring any and all of Tom's arguments after he has deviated; purely on principle. What matter is that he didn't deliver, and he wasted effort on something that was not asked/planned. The bottom line is that Tom must at all times be working towards the goal that was planned, not the goal that Tom has decided for himself."
How can I avoid team burnout?,"In every point below I aim to provide usable options for ""How can I avoid team burnout?""  Although there is often no single cause to this, given ""extremely burnt out on a project after 150 hours or so."", I would look at all possible areas.  Make it a ""project"" and present it up (mgmt) and down (team) to get both resources and buy-in. I have found that burnout does not so much happen ""at"" a specific point and it varies from person to person.  For some it's 300-400 hours.  For others it's 1000-5000 or more as you note.  Regardless of the hours, burnout builds over time and reflects many things.
Without knowing the specifics, from both yourself AND (confidentially - hah!) your staff I would suggest the following as areas to examine and focus on.
A lot of the things that can make a different are subtle intangibles - but they add up.
The following summary is what I have learned from decades of development and would need to be tailored to your company/budget: Listen First !   Ask your team.  Ask again.  Ask every week ""what can I do to help you - it's my job!"".  Seek first to understand and then to be understood. :) Be honest.  Programmers, like most folks, can sniff out falseness quickly and it's a very demotivating !   Don't focus on hours (long or short) focus on dedication and output. Encourage, reward and promote developers who want to use best practices. Give developers as much autonomy as possible.  Allow mistakes (sometimes) when not critical. Give developers variety in the projects they are working on concurrently. Provide general training.  Developers need to continue improving skills in a variety of areas to stay current. Provide specific training.  Developers need the skills to do the specific tasks at hand, or they are forced to learn on the job, reducing the time to do the job (let alone well) which is frustrating and stressful. Send developers to conferences in relevant technologies.  They improve their skills and you can benefit. Developers are often much more willing to work on 'boring, burnout; stuff if they also get to attend a couple of fun conferences a year and other get other forms of training.  Travel here is good too as it can be a cool benefit itself.  Address Technical Debt.  Understand it and acknowledge it publicly with your tech team and with management when it exists.  Spread knowledge about why it is bad and better practices to address and avoid it.  Technical Debt can be very discouraging to your best developers. Encourage a good attitude and lead by example.  Go to training YOURSELF on better management.   Acknowledge,  praise and encourage good work by your team. Use humor (carefully, considering the people) to defuse tense and difficult situations. If there is a lot of bureaucracy or slowness in the organization, avoid boredom by compensating for 'downtime' with a variety of other work, education, etc. Developers working with Users sometimes have conflicts due to different perspectives and areas of expertise. Encourage greater communication to address this. Use good tools for project/feature/bug tracking, e.g. Pivotal Tracker.  Pick a tool that your team find easy and helpful to use.  Agree on the usage patterns and appropriate naming, categorization of issues (severity, priority), etc.  Define the workflow with clear meetings, communications, messages, etc.  Make sure everyone is on the 'same page' as to what the direction is.  Don't assume they are. Address issues with regular scheduled meetings and never assume that everything is ok. Provide quality equipment.  Don't pay a developer 70,000 (or a lot more) and then skimp a few hundred dollars on equipment. Give developers variety in the technologies they are using to keep them fresh. Provide quality tools.  Quality work by craftsmen and craftwomen requires quality tools, as with all industries.  Give people tools they they find a pleasure to use.  Not a pain and frustration. Keep a constant supply of cool tools, technologies and toys.  The kind of developers you may want often love this stuff more than $$$. Encourage developers to specialize in technologies they are most interested in and enjoy. Seek out and implement technologies that automate repetitive tasks such as running tests, building code stacks. Use tools that report on code quality and use the output from these tools to be guide and help on making better quality code so the case for doing so doesn't have to just be a conversation, stats can be powerful. Provide a great workplace that encourages developers to come into the office (still best for groups working together) rather than work remotely with:- coffee, snacks, juice and a cool environment. Provide quality workstations and quality chairs.  Provide the option of stand-up desks which some enjoy.  Cardboard ones (that work) are available. Provide a building and rooms with good a/c and heating.  Make sure there are good window blinds and lighting for all. Provide multiple big screens for each developer and a Big Visible Charts screen to show rotating images of key indicators (build successes, project tracker tickets, New Relic Report, Google Analytics on site visits, etc. Encourage breaks.  Find fun activities both team and inter-team (outside IS). Respect people's habits.  Some folks need peace and quiet sometimes. Others don't notice noise ever. Examine the team makeup, is one member (even if competent technically) consistently 'toxic'?  If possible, locate the development team in a 'geek' friendly location. Encourage healthy habits with gym membership, on-premise site showers (if possible) for exercisable commutes, healthy snacks (granola bars, fruit, healthy cereal, etc. as opposed to pizza, donuts, baked goods.  If people want other stuff they can still buy it anyway!)  Healthy body = healthy brain & less sick time. Support local User Groups for the technologies you use.  Items like this can be subtle but they are basically like image marketing - you buy pizzas for a local user group, or host a meeting, your company looks good and supportive and people feel better working there. Final comment: realize omg this a full-time job with little time for
  development and run out with your hair on fire.  Oh yes, comedy and a
  sense of humor help A LOT. Best Luck!"
PMP vs PRINCE2 - Why one rather than the other?,"PMP and Prince2 are two different things: PMP is based upon the PMBOK, which is a Standard, NOT a methodology. It contains a truck load of processes and 'generally accepted' techniques of project management by which to evaluate or complete the way you run your projects or the methodology you use. It is therefore more theoretical, a reference guide. Prince2 on the other hand is a methodology, with a detailed process model and templates. It gives a step by step guidance on how to organise and run a project. It is more practical than the PMBOK. It still needs to be tailored to your needs but it is more a manual than a reference guide. It focusses on just a limited set of techniques.  I would therefore dare to call them complementary. One example would be procurement management, which is not included in Prince2. Google around and you'll find some in depth comparisons between the two. As to preference, that is personal of course. Just like Yegor, I'm happy to know them both, (but not Prince2 certified). The PMBOK (hence PMP) is more comprehensive of the whole project management field. I can apply (parts of) it on any project, also a Prince2 - project. Prince2 is, well, a methodology. Many companies create their own aligned with pmbok (or other standard like IPMA)."
Strict or pragmatic Scrum?,"Scrum and Agile are loosely-defined. Every company implements it differently depending on how much they can ""tolerate."" I've worked on projects where we don't use sprints, and other projects where we break down stories to hourly items. The best way to implement it is to use whatever practices benefit you, and leave whatever doesn't. While some ""puritans"" may complain that it's not scrum, reality dictates that unless people get benefit out of it (or see benefit in the process parts of it) they won't want to implement it."
How do you convince a client to use Agile Methods?,"Gradually If you try to convince your customer (or boss, management, colleagues, etc) to do something totally differently to how they've been used to doing it, then they'll react in one of the typical ways in response to change: acceptance, panic, refusal, etc. So, I recommend a gradual adoption of Agile methods until you're there, for example: Start by having weekly meetings with the customer to discuss the 'prioritised requirements' (Feature Backlog). Ensure the priorities are set by the customer and are in Story Points units (with guidance from you). When you add items to the list, write them in 'User Story' language, but familiar enough not to confuse/alienate the customer. If you've already got some kind of specification or use cases, adapt them, but don't be tempted to totally re-write them - the customer likely won't be able to make the leap. Have regular deliverables so that the customer can see progress and the benefits of the new way of working. Make sure they know what they've just received, how to get to it (URL, download site, etc) and follow up to make sure they've tried it. Get feedback on these deliverables at the next weekly meeting so that the customer can refine the Feature Backlog according to what they want to see next. Take the time to outline this 'choose top user stories, implement, deliver, review' mechanism to introduce the concept of an 'iteration' or sprint. Assign cost estimates to each User Story so that the customer can understand the effort required to achieve each User Story and can learn how much could be achieved in one iteration. Be open with the customer about the Planning Game used to come up with the estimates. Make sure the customer can see how many User Stories have been achieved so far (budget used) and gets a clear understanding of how many of the remaining stories could be completed in the remaining time/budget. I've done this successfully with multiple customers and found that after delivering on promises for a few weeks, they totally trusted us from then on and focussed more on which features they wanted most urgently rather than whether or not we were going to deliver. We didn't necessarily expose them to all the terminology, but they 'got' the regular updates and open-and-honest discussion about what features get implemented next. There's nothing scary, wrong or weird about iterative project methodologies (such as Agile, XP or Scrum), its' just not the 'traditional' Waterfall method. Having a nice human explanation helps:  In traditional construction, you can't alter the foundations without
  first tearing down a house/office block/bridge. This is one reason that
  you have to get the foundations right first before moving on to the walls
  and roof. In other industries, you can change any part of the system without having
  to start again. For example, in Formula One, you can jack up the car
  to change the wheels - you don't need to disassemble the whole car. Therefore, some projects are very suitable for a iterative/cyclical approach where
  the initial solution is refined many times until it is just right. I've deliberately been vague with the Agile terminology in order to convey the message easier and I've had a long day so may have got a bit muddled in there."
What's the best definition and explanation of project risk?,"Risk is any uncertain event that can have an impact on the success of a project.  Schedule slippage is a risk, even if it's caused by bad estimating.  Another example would be a change in requirements. You can help manage risk by using a risk matrix.  By plotting the severity of an event against its likelihood, a risk matrix helps you prioritize which risks to address."
Is Planning Poker Bad for Software Development Teams?,"Is Planning Poker Bad for Software Development Teams? This is the wrong question to ask. Planning poker is a tool. Asking if planning poker is bad for software development teams is like asking if a screwdriver is bad for plumbers. If the tool fits the job then it's a good tool, if not, then it's not. The real question you should be asking yourself is: Why is my project manager so adamant about planning poker? You don't add any extra context to be able to answer this but I'm thinking at two immediate reasons:  An estimate is an approximation. The fact that you provide estimates as 3.75 hours (as you mention in your comment) means that you are ignoring this fact, you or maybe your project manager. I suggest you read the following posts for hours vs story point estimation and why planning poker is a good tool for many teams: Another thing to add is that planning poker is a consensus-based estimation techniques. That means that when you get vastly different estimates, the team members discuss it until they reach a number that they all agree with. They don't just estimate as a team and then take the average. An average completely destroys the discussion that needs to take place in order to reach consensus and also destroys the spread of the different estimations people provided. If a senior says 1 day, and a junior says 5 days, getting back (5 + 1) /2 = 3 days is not a good estimate because the senior will finish early while the junior will probably be late. Then what happens if the junior works on the task? The project manager will pressure them to finish the work in 3 days even though they thought it will take 5 (and that was probably wrong too and most likely they will finish in 7 days). Planning poker is a tool. Story points are tools. Your project manager should probably learn what these tools are all about before insisting on estimating in hours and keeping people accountable for estimates that look forced from what you are describing."
"Is imposing ""impossible deadlines"" a Management Technique?","There is a difference between ""impossible"" and ""aggressive"". Setting ""impossible"" goals, ones where there is almost zero chance of success, is a fantastic way to demotivate your team in the long run  because teams are being set up for failure. I've been in companies where the team will provide an honest estimation that a project will take X months to complete and management divides that by some factor as your goal because they've already made a promise or projects are always ""late"". This becomes a self-fulfilling prophecy because there is too little time to get the project done. Very frustrating to be in that kind of environment. Setting ""aggressive"" goals, ones where there is some chance of success even if unlikely, is a reasonable approach to get the team to perform better than they would otherwise. I've been in companies that do this and it has worked well, the main downside is that you have to find a reasonable definition of what ""aggressive"" looks like so that you can push the team to excel without burning them out. "
What is the ongoing value of the Kanban board to the developers as opposed to management,"Good question - well phrased.   Best answer is ""Never be the senior guy with a secret"".   Development is difficult to schedule.  Last week I told my manager that the new tool enables me to solve very complex tasks in 5 minutes, but sometimes very simple tasks take a day or more.  That experience is fairly common to most of the development tasks I've managed.  The developer, the PM and the manager should all understand that all development tasks must be estimated with a confidence interval.  Sometimes the dev has tools or other infrastructure that doubles or triples the estimated time of the task.  That is just reality. But having done dev myself, there are tasks where the language or the environment are missing critical tools and I have to develop the tool before I can develop the deliverable.  Usually that is OK and I'm still within the estimate.  But sometimes when I step off that precipice into the unknown I discover that the limits of the gap are difficult - that I have to develop tools to test the tools that compensate for the missing features.  And I get nested deeply enough in there that I lose perspective on the estimated time of delivery - I'm working on the product, doing what I should, building towards the deliverable, but the time estimate is now completely out of the envelope. That's why the devs want to update the board.  Because they want to develop code; they don't want to adjust delivery dates, they don't want to negotiate with stakeholders, they don't want to discuss crashing the schedule or the dozen other things.  The kanban board is the interface /API to the development process.  Devs should be able to concentrate on the elegance of their code - on their professional skills.  Managers should be able to observe that coding and manage cost/quality/schedule/stakeholders/resources/delivery. If you want to develop, then you've got to share state information with management and permit management to do the things that are not coding.  (Coding without regard to delivery is called ""hobby"" and it doesn't pay reliably).   If you don't update the kanban board, then you're preventing me from doing my job (supporting the dev).  If you don't update the kanban board and you exceed your estimate, then you're the senior guy with a secret and you deserve all the punishment you get.  If you don't update the kanban board then you're forcing management to do exception handling - which consists of hanging over your cubicle wall bothering you with requests for TPS & estimates, and stakeholder status messages.  If you do update the kanban board, then the manager can do all those things, leaving you free to do the work that is satisfying. An updated Kanban board is valuable to the dev because informed management is valuable to devs.  If management is not informed, management must interrupt flow to get answers.   Having said that, I have to acknowledge the excellent and succinct summary provided by Barnaby Golden.   I was working on the assumption that the company was small enough that the knowledge of handoff and complete was conveyed through tribal knowledge and didn't need a process. Subsequently occurred to me that ""As a developer, Kanban tells me whether my work is critical path, and allows me to estimate how long until I am critical path"".  Although Kanban isn't about ""critical path"", on any development effort where the work is shared, there are moments where work is tightly coupled/highly dependent, and times when work is loosely coupled (We can't finish the deliverable until we both finish, but until then we can work independently).  The Kanban board is a place to register information that tells each developer how tightly coupled they are.  If I were developing, I'd want to keep track of whether other people's work depended on mine (or vice versa). That is separate from the fact (described in detail above) that management needs the most status information on the most tightly coupled/critical path development efforts.  Finally I want to recognize @SirTechSpec's excellent summary which I will quote below because comments are ephemeral Speaking as someone who didn't have this at my last job, to disastrous effect - the chief direct value of the kanban to devs is being able to point to it and say ""no"", phrased as ""I can do that, but I'm at my limit for items in progress. Have you negotiated with the owners of those tasks to suspend work, or shall I add it to the backlog?"" Kanban is about throttling effort.  Using the Kanban board should halt the practice of piling work on until the developers protest."
How long should an Agile Sprint be?,"If you were new to Scrum and sprints, I would say you should start with some given length (3 weeks or 30 days) and check if it works for you and make changes if necessery. Instead, it looks like you are already familiar with sprints, so question is: what is your experience with sprint duration? Do you have any doubts which makes you ask the question? I can see couple of influencing factors: I can not give you the exact number of days sprint should take, as what I said above is tightly connected to the team quality, technology and architecture used, and product you are working on. It is probably not the best idea to change the sprint length too often because it affects your and team ability to predict velocity."
How can a Scrum daily not be a status pull?,"Where is the collaboration part? The collaboration is based on the assumption that the Developers are not working in silos, and that they have interdependencies. The purpose of the Daily Scrum is to plan the upcoming daily work cycle. The 2020 Scrum Guide says: The Developers can select whatever structure and techniques they want, as long as their Daily Scrum focuses on progress toward the Sprint Goal and produces an actionable plan for the next day of work. In other words, the reliance on the ""three questions"" is no longer prescribed or recommended, but you can still use them in the unlikely event that the Developers actually find them useful. However, they were dropped primarily because they shifted the focus away from collaboration and towards status reporting, especially about individual progress or specific Sprint Backlog items. That's why it's now considered an anti-pattern: the focus of the meeting should be on collaborative progress towards the Sprint Goal. Instead, the Developers should be discussing the current day's work (or possibly the next day's, if the Scrum is held at the end of the day). Assuming the Daily Scrum is held closer to the start of the day, there are some core things the Developers need to collaborate on, such as: The point here is that it's just-in-time coordination and planning between Developers, not a status report. The content of the coordination and planning is really up to the Developers, so long as it meets the objectives of building the Increment and advancing towards the Sprint Goal. Note that the Scrum Guide also says: The Daily Scrum is not the only time Developers are allowed to adjust their plan. They often meet throughout the day for more detailed discussions about adapting or re-planning the rest of the Sprint’s work. So, the Daily Scrum is ultimately about just-in-time planning and coordination between Developers. This goes beyond just the current day's work, although that's the primary focus; it's also about coordinating whatever else is needed to make progress towards the Sprint Goal, including setting up additional meetings or discussions. The Daily Scrum itself is time-limited and scoped to things that need to be planned or coordinated short-term (including additional meetings) rather than trying to boil the ocean within a fifteen-minute time box."
How to allow developers to get enough quality development time while keeping to support & maintenance obligations,"I'm a bit unclear how you are managing the management/support requests.  Actually, I'm unclear whether you are managing them at all.  You need to manage these requests, to protect your developers. Software developers can only be productive if they have extensive time ""in the zone"".  Interruptions are the number-one thing that can kill developer productivity and morale.  If you're constantly in interrupt mode, where you are interrupting them for some new request, then you're probably doing it wrong. Instead, it sounds like you need to have a queue for support/maintenance requests, where they are assigned a priority.  Rather than immediately implementing them, why don't you let them wait in the queue until when you are scheduled to work on them? Have you considered deciding what fraction of time you want to spend on maintenance vs new development, and then assigning your developers a schedule accordingly?  For instance, if you want to spend 25% of your time on maintenance/support and 75% of your time on new development, then you have several options: you could assign each developer one week of the month where they are on maintenance/support and 3 weeks of the month where they are on new development.  When a new support/maintenance request comes in, it goes into the queue, gets assigned a priority, and then when a developer has scheduled time for maintenance/support, they start pulling the highest items from the queue until their scheduled time is over. One thing is clear: you need to start making some prioritizations.  If any time someone sends you a maintenance/support request, you immediately ""jump right on it"", then you've implicitly made a priority decision: you've decided that every maintenance/support request (no matter how minor) is more important than new development (no matter how important).  If that doesn't match the priorities that make the most sense for your business, maybe you need to re-consider how you are prioritizing and how those priorities are reflected in your team's work. Once you start prioritizing, it's possible you may discover you can't do everything with your existing team.  At that point, you have two choices: hire more developers, or accept that there are some tasks you cannot and will not do with your existing resources."
Advice for dealing with a cowboy programmer in an agile team,"By the sounds of it you have isolated this issue to the developer and that (imo) means you need to modify your process to ensure issues like this don't continually occur or modify the interactions with this developer. On a side note, don't count out the tasks / stories on the board as being a potential cause of this scope creep. Scope creep is resulting from a poorly understood user story: Have you INVEST'ed in writing good user stories?  Do your stories have clearly defined acceptance criteria (Acceptance criteria are the requirements that have to be met for a story to be assessed as complete) ? If your answer to these questions is yes, then you may want to talk to the team about modifying the process when a team member picks up a task from the board to include a discussion with the Product Owner (or whom ever is representing the PO).  This discussion is simply intended to make sure the developer has a clear understanding of what ""Done"" means. Scope creep is a symptom of the developer and not the process: You need to have a candid discussion with this individual. They need to know that the scope creep they are adding to the stories they work on is affecting the project and the desired outcome of the story. If they have ""ideas"" you should encourage that they bring them forward but not blindly code them into the story. If their behavior does not change after having this discussion then I would remove them from the team. Scope creep is a symptom of the teams definition of done: How are stories accepted as done on your team? By the sounds of it you are saying that when the story is moved to ""done"" is has a large amount of bloat added to it, but it is still moved to done and ""accepted"". On any team I have worked on, if the ""bells and whistles"" did not add to the user story (or sometimes even if they existed) I would have rejected it and moved it back to in progress until the acceptance criteria had been met for that story. You do this a few times and it become pretty evident to individuals they should be developing the bare minimum that meets the stories acceptance criteria Scope creep is a symptom of the individuals design: Is design being vetted by the team prior to a developer coding on the story? If not, this could be something you add to your process in the form of a design session. Be sure to include the PO or PO representative to ensure that the proposed design is the bare minimum to meet the stories acceptance criteria. Note, that this design session could simply be an ad hoc discussion in front of a whiteboard."
How do you schedule delivery dates in Scrum?,"Agile release planning is based on fixed-length, normed-capacity cycles that operate on dynamically-planned and dynamically-scoped features. In Scrum, fixed-date release planning must be handled by controlling scope to meet the deadlines, as you cannot have both fixed-date and fixed-scope deadlines simultaneously. This is rarely a practical problem, but can be a political one in non-agile shops. Agile release planning is based on iterations. In order to do calendar- or time-based release planning in Scrum: Number of iterations for a release are calculated using the following variables and formula: The i value can be turned back into a calendar or time estimate by multiplying interations by the length of the Sprints in weeks or months, e.g. i * 2. Let's say you have a total backlog of 200 story points, and plan to use a two-week Sprint length. Your team's historical velocity is 20, but this is a brand-new project with a large cone of uncertainty, so your fudge factor is the standard 0.6 multiplier; as a result, your planning velocity is 12 story points per Sprint after applying the fudge factor. So, your release plan for all of the Product Backlog Items would be: You then turn this into a calendar or time estimate with: Based on this information, your project schedule will state that it will take approximately 34 weeks to ship all the features currently in the Product Backlog. This is an estimate based on the information currently available, and should be treated as a planning value rather than an ironclad guarantee. As the project progresses, the cone of uncertainty narrows and the team can make more accurate estimates about the amount of remaining work on the Product Backlog. In addition, a properly-functioning Scrum team will become more accurate about measuring its velocity as the project continues, so the release-schedule calculations should be redone from time to time to ""true up"" the schedule based on more accurate data as it becomes available. In addition, the Product Owner may add or remove scope (in the form of Product Backlog Items) throughout the project. This will expand or reduce the scope of the project, and will obviously impact the estimated schedule. Changing project scope should generally trigger a recalculation of the release date when that happens. Finally, Scrum strives to provide a potentially-shippable product at the end of each and every Sprint. While it may not be feature-complete in the sense that it contains 100% of all backlog items, the product should be a stable and releasable state during Sprint Review so that the organization can choose to ship earlier if sufficient value is present in the product to justify shipping in its current state. This ""cashing out"" of earned value to ship a minimum viable product that is deemed ""good enough"" can provide the business (not just the Scrum team) with a significant agile advantage."
How can I manage team distractions like chit-chat?,"I work with a team of developers who are talented but often distract each other with chit-chat. You say they are ""talented but distracted."" What makes you think they are talented? Why do you think they are distracted? What is your metric for determining that the team or the process is operating at a sub-optimal level?  You haven't really made a case for any of those things, except insofar as we're supposed to agree ab initio that ""chit-chat"" (which has a rather pejorative connotation) is disruptive to the project. How have you determined that the team's communications style is preventing your project from succeeding? Ideally the developers would have expectations that would require them to stay focused and manager (sic) their own work. While I agree that an ideal team is self-managing, I have no knowledge of your hiring practices, corporate culture, or organizational incentives for teams to be self-managing. However, the fact that you appear to be in a role where you are tasked with managing a team that isn't self-managing argues that expecting such may not be reasonable without changes to your organization or process. In addition, ""staying focused"" is often management-speak for ""looking busy."" As above, unless you can make the case that your team is failing to perform, it really does sound like how they behave is more important than what results they produce. In fact, by making ""how"" an issue, you're acting contrary to the very principle of self-management you seem to want. Even if the team is truly disengaged, your time would be better spent figuring out how to engage them rather than on ways to make them look engaged. Developers are often odd ducks. Some developers work best in catacomb-like silence or working at 2:00am; others thrive on cross-talk and team engagement in the office. Regardless of work style, though, all developers need thinking time to be productive---more clicks on the keyboard (e.g. higher utilization) does not lead to more throughput or higher-quality code. Even when I ask how long it might take to complete items (which I can complete in a very accurate time frame) I get negative feedback which indicates a desire to suppress accountability. Again, your conclusion isn't based on information in evidence. There may be other reasons your development team doesn't want to give hard deadlines. ""Accountability"" is a buzzword for a way to shift blame. If your organizational culture likes to affix blame, and projects are often late or otherwise doomed to failure, why should the team want to be held accountable? Commandments from on high aren't commitments. If the team isn't part of the estimation or scheduling process, then they are being ""held accountable"" for delivery dates that they didn't sign up for.  Ask yourself honestly whether developer estimates are solicited and honored as a project baseline, or whether project deadlines are set outside the team. Estimates aren't commitments. If a developer tells you something will probably take three days, but the job takes five, what happens in your organization? Is someone to blame? Does the developer get punished or denigrated for the mis-estimate? If so, why should they do anything other than slog onwards at whatever pace they feel is sustainable? Commitments aren't guarantees. Developers are rarely stupid. If they know something will take two weeks (due to complexity, process overhead, or organizational obstacles) and you think it will take two days, what's their incentive for giving you a different deadline? If the organization routinely cuts their estimates, and then holds them accountable, where is their incentive? If they give honest estimates, and fail to meet voluntary commitments through external impediments, does the organization expect a money-back guarantee in the form of unpaid overtime instead of trying to resolve the impediment? Even if we assume that your conclusion that the team wants to avoid accountability is true, you haven't dug deeply enough into why. There's clearly an organizational or process issue at work here, and solving the perceived problem isn't really addressing the root cause---or buying you anything if you are ultimately being ""held accountable"" for a project that is failing. Take an honest look at your organization, your project management process, and the members of your team. Try to be objective, and see if the incentives actually align with the interests of the developers. If not, start there! Holding a Scrum-like retrospective might help, too. If the real problem you want to solve is getting honest estimates from the development team, the only people who can tell you how to get them are the members of the team. Of course, you will need to earn their trust (if honest communication hasn't been the norm), and there are no silver bullets. Still, it's one of the best tools out there: ask the people with the actual answers! There are always other things you can inspect-and-adapt. Still, you need to start somewhere, and holding honest and open dialogs is almost always the very best place to do that."
Which Scrum certification provider is most widely recognized or accepted?,"There isn't much of difference in recognition/acceptability of both certifications.  One big difference is that to get Scrum.org Professional Scrum Master I you don't have to go to the training. They offer trainings, but they're optional. 
You only need to pass online exam and you can even try out your knowledge for free in online assessment. Despite requirement of getting 85% on PSM I exam, it's very simple and most of the questions are obvious.  For scrumalliance.org Certified Scrum Master, their training is mandatory and for many years training was all it took to get certification. That's right: no exam. So, the value of certification was next to nothing. Now it changed and you need to pass exam.  I'm holding both of these and attended both what I would recommend: if you're looking to get certification, go with Scrum.org PSM I - you won't have to invest money in training.  If you want to get to Scrum training, I would focus not on ScrumAlliance vs Scrum.org, but rather on specific trainer. Unfortunately both organizations have great and bad trainers and before investing money into Scrum training I would suggest asking someone for opinion on specific trainer. "
Should I cancel the daily scrum if the team has only minor issues to discuss?,"The Daily Scrum is not for addressing ""issues,"" minor or not. It's a just-in-time planning meeting for the Developers to collaborate on the current day's work. If there are issues or blockers identified that won't easily fit within the time box of the Daily Scrum, then this is the time to coordinate who will meet to discuss it, and when that discussion will happen—in other words, coordinating and planning around the issue! The Daily Scrum is a mandatory framework event. In fact, the 2020 Scrum Guide says (emphasis mine): To reduce complexity...[the Daily Scrum] is held at the same time and place every working day of the Sprint. If the team routinely has nothing to discuss during the Daily Scrum, then that's a whiffy project smell indicating that the team is not actively collaborating around a central coherence for the Increment, or that the team may not actually be doing Scrum. You can certainly trim the length of the Daily Scrum on days when the just-in-time planning and coordination takes less than the maximum of 15 minutes. If you meet for five minutes and none of the Developers have anything else to talk about, everyone gets ten minutes back in their day. If the purpose of the meeting has been fulfilled, you don't have to keep going until you exhaust the time box. However, to implement Scrum properly, you need to provide the framework events like the Daily Scrum at predictable intervals on a reliable cadence. This ensures the entire Scrum Team can rely on the event cadence to coordinate things you may not have thought about ahead of time, and that last-minute planning concerns have a clear place to be addressed each day. Doing anything else actively works against the empirical control process and the underlying framework. Don't do that."
What's the difference between Scope Creep vs Scope Change?,"Scope Change is an official decision made by the project manager and the client to change a feature X to expand or reduce it's functionality.  Generally, scope change involves making adjustments to the cost, budget, other features, or the timeline. On the other hand, Scope Creep is generally referred to as the phenomenon where the original project scope to build a product with feature X, Y, and Z slowly grows outside of the scope originally defined in the statement of work. Scope creep refers to scope change which happens slowly and unofficially, without changing due dates or otherwise making adjustments to the budget. A good analogy is when a frog is placed in water that slowly heats up to a boiling point.  The changes are so small that a problem isn't noticed right away, until suddenly, the team finds itself in hot water. An example of scope creep in a construction project could be last minute changes to add more costly trimmings, better paint, more expensive tiles, or other changes in the types of materials in areas where the materials weren't well defined in the scope document. An example of a scope change would be when the client decides to not only redo the master bedroom in the house but then also decides to obtain an estimate on redoing the bathroom as well."
"Project is late, how should PM act?","First of all, I think there are two external, important factors, to be kept in mind: Type of contract, how the contract was created, who created functional requirements and technical proposal and to which extend Interests of company management in that particular customer as current and future customer. If management considers that customer or project to be of high importance for the entire company, maybe you can convince them of considering that project as some type of 'investment' where maybe they should make further funds available. Maybe there are also other stakeholders on that project which might have their say. Having said that, what seems to be the core of the problem is interpretation of project scope, and that's also what I would mainly focus on in discussions with the sponsor. My main argumentation line would be that it was impossible to plan that project in more detail in advance, because otherwise you would have to charge him just for that pre-planing tasks already. Given his agreement on that project approach (I assume there was some type of agreement on that in advance), it is natural that there are deviations in expectations, and that you and your estimators simply could not take everything possible into account in advance.  Keeping in mind the above said regarding company management, I think the least you should ask for is extension of time."
How do you deal with continuous work pressure?,"It seems like work-life balance type of issue. In short most of us can work for pretty long time at over 100% rate. The problem is at the end of the process we're burned out. Now the manager either doesn't know that or acknowledges the fact, but doesn't care and expects to exchange those who are burned out with freshmen. If the former is true there's a chance to convince the manager to change the attitude. You can start with Stephen Covey's sharpen the saw metaphor (and generally the whole 7 habits of highly effective people). As simple as that: if you never rest your performance will be decreasing over time so it's manager's business to give you some time to improve your skills. You can also try to show them how they lose competence in the team when they're losing people who can't work that way any longer. If nothing seems to work chances are good the manager is the latter type. In this situation you have only two choices: Set your own borders in terms of work-life balance (btw: here's great TED video on the subject from Nigel Marsh) so you keep yourself in rather healthy condition. It means you'll have to face the consequences as the one who isn't considered as ""engaged"" by the manager, but your personal development and better perspectives which follows can be well worth it. Leave the organization or the part of it controlled by the manager. If you can't change them, leave them. If it is possible to make a transition within the organization that's a safer way but more likely it'll be about leaving the company. "
"Why does management have to ""buy into"" Scrum?","Speaking from experience... I once attempted to bring Scrum into a situation where: Now, while this might sound like a disaster, it wasn't... terrible. We completed our big, 2-year project only about half a year late, and having completed all features. However, we could have done better. We tried to keep the manager aware of our process and status, but he grew increasingly uncomfortable (due to how strange he found it), and eventually simply wanted no part of it... and was later upset at being blind-sided by a certain delay in the project that, had he been involved, he could have mitigated. As I noted, we completed all features... because once a feature was accepted, it must be included... even if the users never really wanted it in the first place. There were some features that, years later, had never been used once. Had we started by developing a Minimum Viable Product and then soliciting further requirements, those features would have shriveled up and died. But we were forbidden from showing the incomplete product to the users. Nonetheless, both my Team and I felt, at the end, that our mangled, half-Scrum approach was better than what we'd had before. We didn't regret attempting it, even without stakeholder buy-in. It just could have been so much more. You added: What is it that Management doesn't see that they don't like not seeing? You don't have deadlines and budgets using Scrum? in response to: Many traditional managers are accustomed to ""knowing"" Scope, Budget and Deadline upon committing to a project. The point is that in a Waterfall mindset, the idea is to plan enough that you are capable of divining the future, and therefore, once development has started, you get fixed scope and fixed cost and fixed schedule. Because they won't change, because you planned perfectly and the future never changes. In an Agile mindset, you can only ever have, at most, 2 of those being fixed. Because you can't ever accurately predict the future, because the future will change. So there must be room to adapt. If all three iron triangle constraints are fixed, then there is no room to adapt. Yeah, but you can't put them off forever. What do you say, ""Oh, btw, this will change and we can't know when it will be complete?"" If you have fixed cost and fixed scope, then yes, you cannot know when a feature will be complete - until it is. As you get closer to that point, the cone of uncertainty narrows, but it only becomes a point once the feature is done. Anything else is blinding yourself to reality by pretending you know when something will be done, when you actually don't."
Why do Scrum user stories only use the Fibonacci series?,"While many agile practitioners have embraced a modified or unmodified Fibonacci sequence for story-point estimation, neither story points nor user stories are actually requirements of the Scrum methodology. Even if you embrace the practice of estimating with story-points and user stories, you can use any relative-sizing tools you want. Some examples I've seen in the field include: If you decide to use story points, the key is to unmoor the points from time estimates. This helps to avoid anchoring, and hopefully prevents estimates from being used improperly as a productivity-management metric rather than a planning or forecasting tool. Feel free to use whatever scale works for your team. However, I'd certainly recommend sticking with Mike Cohn's Planning Poker Fibonacci sequence unless you have a strong reason to do otherwise."
"What are the definitions and differences between: Theme, Epic, Feature, User Story and Task?","Each organization and author has a different definition for these terms. In this article, Mike Cohn provides his definition of User Stories, Epics and Themes: A user story is simply something a user wants. User stories are more
  than just text written on an index card but for our purposes here,
  just think of user story as a bit of text saying something like,
  ""Paginate the monthly sales report"" or, ""Change tax calculations on
  invoices."" Many teams have learned the benefits of writing user
  stories in the form of: ""As a <type of user> I <want/can/am able
  to/need to/etc.> so that <some reason>."" But it is not necessary that
  a user story be written that way. Check out the advantages of that
  user story format. A Scrum epic is a large user story. There's no magic threshold at
  which we call a particular story an epic. It just means ""big user
  story."" I like to think of this in relation to movies. If I tell you a
  particular movie was an ""action-adventure movie"" that tells you
  something about the movie. There's probably some car chases, probably
  some shooting, and so on. It tells you this even though there is no
  universal definition that we've agreed to follow, and that an
  action-adventure movie must contain at least three car chases, at
  least 45 bullets must be shot, and …. So, ""epic"" is just a label we apply to a large story. Calling a story
  an epic can sometimes convey additional meaning. Suppose you ask me if
  I had time yesterday to write the user stories about the monthly
  reporting part of the system. ""Yes,"" I reply, ""but they are mostly
  epics."" That tells you that while I did write them, I didn't get the
  chance to break most of them down into stories that are probably small
  enough to implement directly. Finally, ""theme"" is a collection of user stories. We could put a
  rubber band around that group of stories I wrote about monthly
  reporting and we'd call that a ""theme."" Sometimes it's helpful to
  think about a group of stories so we have a term for that. Sticking
  with the movie analogy above, in my DVD rack I have filed the James
  Bond movies together. They are a theme or grouping. During the sprint, tasks are defined for each user story, so that the development team can have a clear sense of how it will accomplish its work. Tasks are simply more granular versions of the work entailed to complete a user story. A task is a technical piece of work necessary to get a story done. Developers split a story in technical tasks to get a realistic estimate of the time it will take to complete a story. It is important to note that user stories are usually estimated using story points, whereas tasks are estimated with hours. A feature is a distinct element of functionality which can provide capabilities to the business. It generally takes many iterations to deliver a feature. A user story is a part of the feature. By splitting a feature in smaller stories, the user can give early feedback to the developers to issues quickly. The relationship between epics and features is the most controversial in the agile community. In my opinion, an epic is a broader concept and an epic can be broken down into different features."
